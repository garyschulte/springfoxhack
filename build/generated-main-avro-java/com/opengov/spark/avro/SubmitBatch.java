/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opengov.spark.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** record type for submitting a job to spark service */
@org.apache.avro.specific.AvroGenerated
@io.swagger.annotations.ApiModel(value = "SubmitBatch", description = "record type for submitting a job to spark service")
public class SubmitBatch extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 105688531486565319L;
  @io.swagger.annotations.ApiModelProperty(hidden=true, name = "schema", access = "avro-schema")
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SubmitBatch\",\"namespace\":\"com.opengov.spark.avro\",\"doc\":\"record type for submitting a job to spark service\",\"fields\":[{\"name\":\"entityId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"order\":\"ignore\"},\"doc\":\"attribute the job to this customer entity id, required\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"attribute the job to this customer user id, required\"},{\"name\":\"jobName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"name for the job, required\"},{\"name\":\"commandTags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"tag(s) which uniquely identify the command used to submit job, required\"},{\"name\":\"clusterTags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"tag(s) which uniquely identify the cluster to execute job, required\"},{\"name\":\"commandArgs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"argument(s) to be passed to the spark job, optional\",\"default\":null},{\"name\":\"jobUuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"job identifier to use for the spark job, optional\",\"default\":null}]}");
  @io.swagger.annotations.ApiModelProperty(hidden=true, name = "schema", access = "avro-schema")
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** attribute the job to this customer entity id, required */
   private java.lang.String entityId;
  /** attribute the job to this customer user id, required */
   private java.lang.String userId;
  /** name for the job, required */
   private java.lang.String jobName;
  /** tag(s) which uniquely identify the command used to submit job, required */
   private java.util.List<java.lang.String> commandTags;
  /** tag(s) which uniquely identify the cluster to execute job, required */
   private java.util.List<java.lang.String> clusterTags;
  /** argument(s) to be passed to the spark job, optional */
   private java.util.List<java.lang.String> commandArgs;
  /** job identifier to use for the spark job, optional */
   private java.lang.String jobUuid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SubmitBatch() {}

  /**
   * All-args constructor.
   * @param entityId attribute the job to this customer entity id, required
   * @param userId attribute the job to this customer user id, required
   * @param jobName name for the job, required
   * @param commandTags tag(s) which uniquely identify the command used to submit job, required
   * @param clusterTags tag(s) which uniquely identify the cluster to execute job, required
   * @param commandArgs argument(s) to be passed to the spark job, optional
   * @param jobUuid job identifier to use for the spark job, optional
   */
  public SubmitBatch(java.lang.String entityId, java.lang.String userId, java.lang.String jobName, java.util.List<java.lang.String> commandTags, java.util.List<java.lang.String> clusterTags, java.util.List<java.lang.String> commandArgs, java.lang.String jobUuid) {
    this.entityId = entityId;
    this.userId = userId;
    this.jobName = jobName;
    this.commandTags = commandTags;
    this.clusterTags = clusterTags;
    this.commandArgs = commandArgs;
    this.jobUuid = jobUuid;
  }

  @io.swagger.annotations.ApiModelProperty(hidden=true, name = "schema", access = "avro-schema")
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return entityId;
    case 1: return userId;
    case 2: return jobName;
    case 3: return commandTags;
    case 4: return clusterTags;
    case 5: return commandArgs;
    case 6: return jobUuid;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: entityId = (java.lang.String)value$; break;
    case 1: userId = (java.lang.String)value$; break;
    case 2: jobName = (java.lang.String)value$; break;
    case 3: commandTags = (java.util.List<java.lang.String>)value$; break;
    case 4: clusterTags = (java.util.List<java.lang.String>)value$; break;
    case 5: commandArgs = (java.util.List<java.lang.String>)value$; break;
    case 6: jobUuid = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'entityId' field.
   * @return attribute the job to this customer entity id, required
   */
  public java.lang.String getEntityId() {
    return entityId;
  }

  /**
   * Sets the value of the 'entityId' field.
   * attribute the job to this customer entity id, required
   * @param value the value to set.
   */
  public void setEntityId(java.lang.String value) {
    this.entityId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return attribute the job to this customer user id, required
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * attribute the job to this customer user id, required
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'jobName' field.
   * @return name for the job, required
   */
  public java.lang.String getJobName() {
    return jobName;
  }

  /**
   * Sets the value of the 'jobName' field.
   * name for the job, required
   * @param value the value to set.
   */
  public void setJobName(java.lang.String value) {
    this.jobName = value;
  }

  /**
   * Gets the value of the 'commandTags' field.
   * @return tag(s) which uniquely identify the command used to submit job, required
   */
  public java.util.List<java.lang.String> getCommandTags() {
    return commandTags;
  }

  /**
   * Sets the value of the 'commandTags' field.
   * tag(s) which uniquely identify the command used to submit job, required
   * @param value the value to set.
   */
  public void setCommandTags(java.util.List<java.lang.String> value) {
    this.commandTags = value;
  }

  /**
   * Gets the value of the 'clusterTags' field.
   * @return tag(s) which uniquely identify the cluster to execute job, required
   */
  public java.util.List<java.lang.String> getClusterTags() {
    return clusterTags;
  }

  /**
   * Sets the value of the 'clusterTags' field.
   * tag(s) which uniquely identify the cluster to execute job, required
   * @param value the value to set.
   */
  public void setClusterTags(java.util.List<java.lang.String> value) {
    this.clusterTags = value;
  }

  /**
   * Gets the value of the 'commandArgs' field.
   * @return argument(s) to be passed to the spark job, optional
   */
  public java.util.List<java.lang.String> getCommandArgs() {
    return commandArgs;
  }

  /**
   * Sets the value of the 'commandArgs' field.
   * argument(s) to be passed to the spark job, optional
   * @param value the value to set.
   */
  public void setCommandArgs(java.util.List<java.lang.String> value) {
    this.commandArgs = value;
  }

  /**
   * Gets the value of the 'jobUuid' field.
   * @return job identifier to use for the spark job, optional
   */
  public java.lang.String getJobUuid() {
    return jobUuid;
  }

  /**
   * Sets the value of the 'jobUuid' field.
   * job identifier to use for the spark job, optional
   * @param value the value to set.
   */
  public void setJobUuid(java.lang.String value) {
    this.jobUuid = value;
  }

  /**
   * Creates a new SubmitBatch RecordBuilder.
   * @return A new SubmitBatch RecordBuilder
   */
  public static com.opengov.spark.avro.SubmitBatch.Builder newBuilder() {
    return new com.opengov.spark.avro.SubmitBatch.Builder();
  }

  /**
   * Creates a new SubmitBatch RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SubmitBatch RecordBuilder
   */
  public static com.opengov.spark.avro.SubmitBatch.Builder newBuilder(com.opengov.spark.avro.SubmitBatch.Builder other) {
    return new com.opengov.spark.avro.SubmitBatch.Builder(other);
  }

  /**
   * Creates a new SubmitBatch RecordBuilder by copying an existing SubmitBatch instance.
   * @param other The existing instance to copy.
   * @return A new SubmitBatch RecordBuilder
   */
  public static com.opengov.spark.avro.SubmitBatch.Builder newBuilder(com.opengov.spark.avro.SubmitBatch other) {
    return new com.opengov.spark.avro.SubmitBatch.Builder(other);
  }

  /**
   * RecordBuilder for SubmitBatch instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SubmitBatch>
    implements org.apache.avro.data.RecordBuilder<SubmitBatch> {

    /** attribute the job to this customer entity id, required */
    private java.lang.String entityId;
    /** attribute the job to this customer user id, required */
    private java.lang.String userId;
    /** name for the job, required */
    private java.lang.String jobName;
    /** tag(s) which uniquely identify the command used to submit job, required */
    private java.util.List<java.lang.String> commandTags;
    /** tag(s) which uniquely identify the cluster to execute job, required */
    private java.util.List<java.lang.String> clusterTags;
    /** argument(s) to be passed to the spark job, optional */
    private java.util.List<java.lang.String> commandArgs;
    /** job identifier to use for the spark job, optional */
    private java.lang.String jobUuid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opengov.spark.avro.SubmitBatch.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.entityId)) {
        this.entityId = data().deepCopy(fields()[0].schema(), other.entityId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.jobName)) {
        this.jobName = data().deepCopy(fields()[2].schema(), other.jobName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.commandTags)) {
        this.commandTags = data().deepCopy(fields()[3].schema(), other.commandTags);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.clusterTags)) {
        this.clusterTags = data().deepCopy(fields()[4].schema(), other.clusterTags);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.commandArgs)) {
        this.commandArgs = data().deepCopy(fields()[5].schema(), other.commandArgs);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.jobUuid)) {
        this.jobUuid = data().deepCopy(fields()[6].schema(), other.jobUuid);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SubmitBatch instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opengov.spark.avro.SubmitBatch other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.entityId)) {
        this.entityId = data().deepCopy(fields()[0].schema(), other.entityId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.jobName)) {
        this.jobName = data().deepCopy(fields()[2].schema(), other.jobName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.commandTags)) {
        this.commandTags = data().deepCopy(fields()[3].schema(), other.commandTags);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.clusterTags)) {
        this.clusterTags = data().deepCopy(fields()[4].schema(), other.clusterTags);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.commandArgs)) {
        this.commandArgs = data().deepCopy(fields()[5].schema(), other.commandArgs);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.jobUuid)) {
        this.jobUuid = data().deepCopy(fields()[6].schema(), other.jobUuid);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'entityId' field.
      * attribute the job to this customer entity id, required
      * @return The value.
      */
    @io.swagger.annotations.ApiModelProperty(name = "entityId", value = "attribute the job to this customer entity id, required", notes = "hey, some notes would go here", required = true)
    public java.lang.String getEntityId() {
      return entityId;
    }

    /**
      * Sets the value of the 'entityId' field.
      * attribute the job to this customer entity id, required
      * @param value The value of 'entityId'.
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder setEntityId(java.lang.String value) {
      validate(fields()[0], value);
      this.entityId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'entityId' field has been set.
      * attribute the job to this customer entity id, required
      * @return True if the 'entityId' field has been set, false otherwise.
      */
    public boolean hasEntityId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'entityId' field.
      * attribute the job to this customer entity id, required
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder clearEntityId() {
      entityId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * attribute the job to this customer user id, required
      * @return The value.
      */
    @io.swagger.annotations.ApiModelProperty(name = "userId", value = "attribute the job to this customer user id, required", notes = "hey, some notes would go here", required = true)
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * attribute the job to this customer user id, required
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * attribute the job to this customer user id, required
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * attribute the job to this customer user id, required
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobName' field.
      * name for the job, required
      * @return The value.
      */
    @io.swagger.annotations.ApiModelProperty(name = "jobName", value = "name for the job, required", notes = "hey, some notes would go here", required = true)
    public java.lang.String getJobName() {
      return jobName;
    }

    /**
      * Sets the value of the 'jobName' field.
      * name for the job, required
      * @param value The value of 'jobName'.
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder setJobName(java.lang.String value) {
      validate(fields()[2], value);
      this.jobName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'jobName' field has been set.
      * name for the job, required
      * @return True if the 'jobName' field has been set, false otherwise.
      */
    public boolean hasJobName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'jobName' field.
      * name for the job, required
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder clearJobName() {
      jobName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'commandTags' field.
      * tag(s) which uniquely identify the command used to submit job, required
      * @return The value.
      */
    @io.swagger.annotations.ApiModelProperty(name = "commandTags", value = "tag(s) which uniquely identify the command used to submit job, required", notes = "hey, some notes would go here", required = true)
    public java.util.List<java.lang.String> getCommandTags() {
      return commandTags;
    }

    /**
      * Sets the value of the 'commandTags' field.
      * tag(s) which uniquely identify the command used to submit job, required
      * @param value The value of 'commandTags'.
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder setCommandTags(java.util.List<java.lang.String> value) {
      validate(fields()[3], value);
      this.commandTags = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'commandTags' field has been set.
      * tag(s) which uniquely identify the command used to submit job, required
      * @return True if the 'commandTags' field has been set, false otherwise.
      */
    public boolean hasCommandTags() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'commandTags' field.
      * tag(s) which uniquely identify the command used to submit job, required
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder clearCommandTags() {
      commandTags = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'clusterTags' field.
      * tag(s) which uniquely identify the cluster to execute job, required
      * @return The value.
      */
    @io.swagger.annotations.ApiModelProperty(name = "clusterTags", value = "tag(s) which uniquely identify the cluster to execute job, required", notes = "hey, some notes would go here", required = true)
    public java.util.List<java.lang.String> getClusterTags() {
      return clusterTags;
    }

    /**
      * Sets the value of the 'clusterTags' field.
      * tag(s) which uniquely identify the cluster to execute job, required
      * @param value The value of 'clusterTags'.
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder setClusterTags(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.clusterTags = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'clusterTags' field has been set.
      * tag(s) which uniquely identify the cluster to execute job, required
      * @return True if the 'clusterTags' field has been set, false otherwise.
      */
    public boolean hasClusterTags() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'clusterTags' field.
      * tag(s) which uniquely identify the cluster to execute job, required
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder clearClusterTags() {
      clusterTags = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'commandArgs' field.
      * argument(s) to be passed to the spark job, optional
      * @return The value.
      */
    @io.swagger.annotations.ApiModelProperty(name = "commandArgs", value = "argument(s) to be passed to the spark job, optional", notes = "hey, some notes would go here", required = false)
    public java.util.List<java.lang.String> getCommandArgs() {
      return commandArgs;
    }

    /**
      * Sets the value of the 'commandArgs' field.
      * argument(s) to be passed to the spark job, optional
      * @param value The value of 'commandArgs'.
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder setCommandArgs(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.commandArgs = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'commandArgs' field has been set.
      * argument(s) to be passed to the spark job, optional
      * @return True if the 'commandArgs' field has been set, false otherwise.
      */
    public boolean hasCommandArgs() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'commandArgs' field.
      * argument(s) to be passed to the spark job, optional
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder clearCommandArgs() {
      commandArgs = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobUuid' field.
      * job identifier to use for the spark job, optional
      * @return The value.
      */
    @io.swagger.annotations.ApiModelProperty(name = "jobUuid", value = "job identifier to use for the spark job, optional", notes = "hey, some notes would go here", required = false)
    public java.lang.String getJobUuid() {
      return jobUuid;
    }

    /**
      * Sets the value of the 'jobUuid' field.
      * job identifier to use for the spark job, optional
      * @param value The value of 'jobUuid'.
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder setJobUuid(java.lang.String value) {
      validate(fields()[6], value);
      this.jobUuid = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'jobUuid' field has been set.
      * job identifier to use for the spark job, optional
      * @return True if the 'jobUuid' field has been set, false otherwise.
      */
    public boolean hasJobUuid() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'jobUuid' field.
      * job identifier to use for the spark job, optional
      * @return This builder.
      */
    public com.opengov.spark.avro.SubmitBatch.Builder clearJobUuid() {
      jobUuid = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public SubmitBatch build() {
      try {
        SubmitBatch record = new SubmitBatch();
        record.entityId = fieldSetFlags()[0] ? this.entityId : (java.lang.String) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.String) defaultValue(fields()[1]);
        record.jobName = fieldSetFlags()[2] ? this.jobName : (java.lang.String) defaultValue(fields()[2]);
        record.commandTags = fieldSetFlags()[3] ? this.commandTags : (java.util.List<java.lang.String>) defaultValue(fields()[3]);
        record.clusterTags = fieldSetFlags()[4] ? this.clusterTags : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        record.commandArgs = fieldSetFlags()[5] ? this.commandArgs : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        record.jobUuid = fieldSetFlags()[6] ? this.jobUuid : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
